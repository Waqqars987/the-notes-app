'use strict';;let mongoose,Notes,isFieldAcceptable,Response;_d2f‍.x([["registerUser",()=>registerUser],["loginUser",()=>loginUser],["addNote",()=>addNote],["updateNote",()=>updateNote],["deleteNote",()=>deleteNote],["viewNote",()=>viewNote],["viewUserNotes",()=>viewUserNotes]]);_d2f‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_d2f‍.w("../models/notesModel",[["default",["Notes"],function(v){Notes=v}]]);_d2f‍.w("../utilities/inputValidator",[["isFieldAcceptable",["isFieldAcceptable"],function(v){isFieldAcceptable=v}]]);_d2f‍.w("../models/responseModel",[["Response",["Response"],function(v){Response=v}]]);







       const registerUser = async (req, res) => {
    console.log("in controller")
    res.setHeader('Content-type', 'application/json');
    try {
        var email = isFieldAcceptable("email", req.body.email).toLowerCase();
        var password = isFieldAcceptable("password", req.body.password);
    }
    catch (err) {
        _d2f‍.g.console.error(err);
        return res.status(400).send(new Response(false, err.toString().split(":")[1].trim()));
    }
    const notes = new Notes({
        emailID: email,
        password: password
    });
    try {
        const savedUser = await notes.save();
        res.json(savedUser);
    } catch (err) {
        res.json(err);
    }

};

       const loginUser = (req, res) => {

    res.setHeader('Content-type', 'application/json');
    try {
        var email = isFieldAcceptable("email", req.query.email).toLowerCase();
        var password = isFieldAcceptable("password", req.query.password);
    }
    catch (err) {
        _d2f‍.g.console.error(err);
        return res.status(400).send(new Response(false, err.toString().split(":")[1].trim()));
    }
    // let connection = mysql.createConnection(dbConfig);
    // let sql = `CALL Login(?,?)`;
    // connection.query(sql, [email, password], (error, results, fields) => {
    //     if (error) {
    //         return res.status(500).send(new Response(false, error.message));
    //     }
    //     else if (results[0].length === 0) {
    //         return res.status(404).send(new Response(false, "Incorrect Email ID or Password!"));
    //     }
    //     else {
    //         res.send(new Response(true, results[0][0]));
    //     }
    // });
    // connection.end();
};

       const addNote = (req, res) => {

    res.setHeader('Content-type', 'application/json');
    try {
        var userID = isFieldAcceptable("User ID", req.body.userID);
        var title = isFieldAcceptable("Title", req.body.title);
        var description = isFieldAcceptable("Description", req.body.description);
    }
    catch (err) {
        _d2f‍.g.console.error(err);
        return res.status(400).send(new Response(false, err.toString().split(":")[1].trim()));
    }
    // let connection = mysql.createConnection(dbConfig);
    // let sql = `CALL AddNote(?,?,?)`;
    // connection.query(sql, [userID, title, description], (error, results, fields) => {
    //     if (error) {
    //         return res.status(500).send(new Response(false, "Could Not Add Note!"));
    //     }
    //     else {
    //         res.send(new Response(true, "Note Added Successfully!"))
    //     }
    // });
    // connection.end();
};

       const updateNote = (req, res) => {

    res.setHeader('Content-type', 'application/json');
    try {
        var noteID = isFieldAcceptable("Note ID", req.body.noteID);
        var title = isFieldAcceptable("Title", req.body.title);
        var description = isFieldAcceptable("Description", req.body.description);
    }
    catch (err) {
        _d2f‍.g.console.error(err);
        return res.status(400).send(new Response(false, err.toString().split(":")[1].trim()));
    }
    //     let connection = mysql.createConnection(dbConfig);
    //     let sql = `CALL UpdateNote(?,?,?)`;
    //     connection.query(sql, [noteID, title, description], (error, results, fields) => {
    //         if (error) {
    //             return res.status(500).send(new Response(false, "Could Not Update Note!"));
    //         }
    //         else if (results.affectedRows === 0) {
    //             return res.status(404).send(new Response(false, "Note Does Not Exist!"));
    //         }
    //         else {
    //             res.send(new Response(true, "Note Updated Successfully!"));
    //         }
    //     });
    //     connection.end();
};

       const deleteNote = (req, res) => {

    res.setHeader('Content-type', 'application/json');
    try {
        var noteID = isFieldAcceptable("Note ID", req.body.noteID);
    }
    catch (err) {
        _d2f‍.g.console.error(err);
        return res.status(400).send(new Response(false, err.toString().split(":")[1].trim()));
    }
    // let connection = mysql.createConnection(dbConfig);
    // let sql = `CALL DeleteNote(?)`;
    // connection.query(sql, [noteID], (error, results, fields) => {
    //     if (error) {
    //         return res.status(500).send(new Response(false, "Could Not Delete Note!"));
    //     }
    //     else if (results.affectedRows === 0) {
    //         return res.status(404).send(new Response(false, "Note Does Not Exist!"));
    //     }
    //     else {
    //         res.send(new Response(true, "Note Deleted Successfully!"));
    //     }
    // });
    // connection.end();
};

       const viewNote = (req, res) => {

    res.setHeader('Content-type', 'application/json');
    try {
        var noteID = isFieldAcceptable("Note ID", req.query.noteID);
    }
    catch (err) {
        _d2f‍.g.console.error(err);
        return res.status(400).send(new Response(false, err.toString().split(":")[1].trim()));
    }
    // let connection = mysql.createConnection(dbConfig);
    // let sql = `CALL ViewNote(?)`;
    // connection.query(sql, [noteID], (error, results, fields) => {
    //     if (error) {
    //         return res.status(500).send(new Response(false, error.message));
    //     }
    //     else if (results[0].length === 0) {
    //         return res.status(404).send(new Response(false, "Incorrect Note ID!"));

    //     }
    //     else {
    //         res.send(new Response(true, results[0][0]));
    //     }
    // });
    // connection.end();
};

       const viewUserNotes = (req, res) => {

    res.setHeader('Content-type', 'application/json');
    try {
        var userID = isFieldAcceptable("User ID", req.query.userID);
    }
    catch (err) {
        _d2f‍.g.console.error(err);
        return res.status(400).send(new Response(false, err.toString().split(":")[1].trim()));
    }
    // let connection = mysql.createConnection(dbConfig);
    // let sql = `CALL ViewUserNotes(?)`;
    // connection.query(sql, [userID], (error, results, fields) => {
    //     if (error) {
    //         return res.status(500).send(new Response(false, error.message));
    //     }
    //     else if (results[0].length === 0) {
    //         return res.status(404).send(new Response(false, "No Notes Found for the given User ID!"));
    //     }
    //     else {
    //         res.send(new Response(true, results[0]));
    //     }
    // });
    // connection.end();
};